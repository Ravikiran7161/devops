**************************************    class-1 *********************************************

1) AWS:  Networking - Learn about vpc
  =================

vpc Types:
vpc with single public subnet
vpc with public and private subnet(NAT)
vpc with pub and priv subnet and aws managed vpn access
vpc with private subnet only and aws managed vpn access 

Points:
supports both ipv4 (CIDR: a/16) and ipv6 (CIDR: a/56)
Migration to ipv6 support but ipv4 can’t disable and act ad dual stack
SG vs ACL 
Flow logs to cloud watch and s3
RT ,IG , Egress-only IG(IPv6) vs NAT (ipv4)
Provided DHCP and DNS 
Vpc peering 
Vpc endpoints powered by PrivateLink  [ interface = elastic network(cw,sns,apigw ..etc) & gateway = route in RT (s3,dyanamo db)]
ClassicLink allows you to link an EC2-Classic instance to a VPC 
Vpn – aws managed vpn(IPsec), cloudHub,thirdpary vpn
Last but not least – Limits apply
                               

Note:  study and understand how VPC works and importance of VPC service.


2) Dockers:  Architecture ,install ,create docker image and docker hub 
   =======

install link: https://docs.docker.com/glossary/?term=installation
verify command: docker version    [both client and server]

Try below:
## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq


Create first container
   git clone https://github.com/raavula/devops.git 
   cd devops/docker/image
   docker build -t friendlyhello .  # Create image using this directory's Dockerfile  


Create an account in : https://hub.docker.com/
   create an repository name for tag the images

docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry


*****************************************************  CLASS-2 ******************************************************
